import { GamePlayer } from "@prisma/client";
import type { NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useContext, useState } from "react";
import { trpc } from "../utils/trpc";

const getPlayerName = (player: GamePlayer) => {
  const user = trpc.useQuery(["user.get", { id: player.userId! }]);

  if (!user.data) {
    return null;
  }

  return user.data?.name;
};

const GameInfo: React.FC<{ players: GamePlayer[] }> = ({ players }) => {
  if (!players[0] || !players[1]) {
    return null;
  }

  return (
    <span className="p-4">
      <span>{getPlayerName(players[0])}</span> vs{" "}
      <span>{getPlayerName(players[1])}</span>
    </span>
  );
};

const GamePlayerScoreButton: React.FC<{ player: GamePlayer }> = ({
  player,
}) => {
  const utils = trpc.useContext();
  const score = trpc.useQuery(["game.getPlayerScore", { playerId: player.id }]);
  const name = getPlayerName(player);
  const giveScore = trpc.useMutation(["game.givePointTo"], {
    onMutate: async ({ playerId }) => {
      await utils.cancelQuery(["game.getPlayerScore"]);
      const score = utils.getQueryData(["game.getPlayerScore"]);
      if (!score) {
        return;
      }
      utils.setQueryData(["game.getPlayerScore"], score + 1);
    },

    onSettled: () => {
      utils.invalidateQueries("game.getPlayerScore");
    },
  });

  if (score.isLoading) {
    return <div>loading...</div>;
  }

  return (
    <div
      onClick={() => giveScore.mutate({ playerId: player.id })}
      className="border-2 w-1/3 aspect-video flex flex-col items-center justify-center hover:cursor-pointer shadow-lg shadow-neutral-900 bg-amber-300 text-neutral-800 "
    >
      <div className="text-xl">{name}</div>
      <div className="text-3xl text-center p-4">{score.data}</div>
    </div>
  );
};

const GameView: React.FC<{ gameId: string }> = ({ gameId }) => {
  const game = trpc.useQuery(["game.getGameInfo", { gameId }]);

  if (game.isLoading) {
    return <div>isLoading...</div>;
  }

  if (!game.data) {
    return <div>Something went wrong</div>;
  }

  if (!game.data?.players || !game.data.players[0] || !game.data.players[1]) {
    return null;
  }

  return (
    <div className="w-2/3 flex flex-col md:flex-row justify-around items-center">
      <GamePlayerScoreButton player={game.data.players[0]} />
      <span>vs</span>
      <GamePlayerScoreButton player={game.data.players[1]} />
    </div>
  );
};

const Game = () => {
  const games = trpc.useQuery(["game.getMine"]);
  const [selected, setSelected] = useState("");

  if (games.isLoading) {
    return <div>loading...</div>;
  }

  if (!games.data || !games.data[0]) {
    return null;
  }

  if (selected === "") {
    setSelected(games.data[0].id);
  }

  return (
    <div className="flex flex-row w-screen flex-grow">
      <form className="w-1/3">
        {games.data?.map((game) => (
          <div key={game.id} className="border p-5">
            <input
              type="radio"
              name="selectedGame"
              value={game.id}
              id={game.id}
              checked={selected === game.id}
              onChange={(e) => setSelected(e.target.value)}
            />
            <label htmlFor={game.id} className="p-5">
              <GameInfo players={game.players} />
            </label>
          </div>
        ))}
      </form>

      <GameView gameId={selected} />
    </div>
  );
};

const Home: NextPage = () => {
  const { data } = useSession();

  if (!data) {
    return <div>You must be logged in to proceed...</div>;
  }

  return (
    <>
      <Head>
        <title>Gul Bil</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Game />
    </>
  );
};

export default Home;
